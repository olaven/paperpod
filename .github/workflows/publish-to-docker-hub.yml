name: Publish to Docker

on:
  push:
    branches:
      - main
      - feature/use-digest-in-deploy

jobs:
  publish-gateway:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push
        id: docker_build_gateway
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./dockerfiles/Dockerfile.gateway
          push: true
          tags: olaven/paperpod-gateway:latest
      - name: Image digest
        run: echo ${{ steps.docker_build_gateway.outputs.digest }}
    outputs:
      digest: ${{ steps.docker_build_gateway.outputs.digest }}
  publish-api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push
        id: docker_build_api
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./dockerfiles/Dockerfile.api
          push: true
          tags: olaven/paperpod-api:latest
          # build-args: |
          #   arg1=value1
          #   arg2=value2
      - name: Image digest
        run: echo ${{ steps.docker_build_api.outputs.digest }}
    outputs:
      digest: ${{ steps.docker_build_api.outputs.digest }}
  publish-authentication:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push
        id: docker_build_authentication
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./dockerfiles/Dockerfile.authentication
          push: true
          tags: olaven/paperpod-authentication:latest
          # build-args: |
          #   arg1=value1
          #   arg2=value2
      - name: Image digest
        run: echo ${{ steps.docker_build_authentication.outputs.digest }}
    outputs:
      digest: ${{ steps.docker_build_authentication.outputs.digest }}
  publish-web:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push
        id: docker_build_web
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./dockerfiles/Dockerfile.web
          push: true
          tags: olaven/paperpod-web:latest
          # build-args: |
          #   arg1=value1
          #   arg2=value2
      - name: Image digest
        run: echo ${{ steps.docker_build_web.outputs.digest }}
    outputs:
      digest: ${{ steps.docker_build_web.outputs.digest }}
  separate_job:
    runs-on: ubuntu-latest
    needs: [publish-gateway, publish-api, publish-authentication, publish-web]
    steps:
      - name: echo-digests-outside-of-their-jobs
        run: echo ${{ needs.publish-gateway.digest}} && echo ${{ needs.publish-api}} && echo ${{ needs.publish-authentication.digest}} &&  echo ${{ needs.publish-web.digest}}

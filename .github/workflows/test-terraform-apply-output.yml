on:
  push:
    branches:
      - feature/ci_deployment_to_digitalocean

jobs:
  update-infrastructure:
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_TERRAFORM_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_TERRAFORM_SECRET_ACCESS_KEY }}
      TF_VAR_stripe_api_token: ${{ secrets.TF_VAR_stripe_api_token }}
      TF_VAR_github_api_token: ${{ secrets.TF_VAR_github_api_token }}
      TF_VAR_test_user_coupon_code: ${{ secrets.TF_VAR_test_user_coupon_code }}
      TF_VAR_do_token: ${{ secrets.TF_VAR_do_token }}
    runs-on: ubuntu-latest
    steps:
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with: 
          terraform_wrapper: false
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: initializing Terraform
        run: yarn infrastructure terraform:assumeenv init -no-color
      - name: Applying infrastructure
        run: yarn infrastructure terraform:assumeenv apply -auto-approve -no-color
      - name: Call terraform output
        id: infrastructure-output
        run: |
          output_from_terraform=$(yarn infrastructure terraform:assumeenv output database_uri)
          some_hardcoded_output="this is some hardcoded output created for test"
          echo $output_from_terraform
          echo $some_hardcoded_output
          echo "::set-output name=database_uri::$output_from_terraform"
          echo "::set-output name=droplet_id::$some_hardcoded_output"
    outputs:
      database_uri: ${{ steps.infrastructure-output.outputs.database_uri }}
      droplet_id: ${{ steps.infrastructure-output.outputs.droplet_id }}
  upload-new-version: # NOTE: this is not implemented, just testing for now  
    runs-on: ubuntu-latest
    needs: [apply-infrastructure]
    steps: 
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.TF_VAR_do_token }}
      - run: | 
          echo: 
          echo "Got database_uri / droplet_id"
          echo ${{ needs.apply-infrastructure.outputs.database_uri}}
          echo ${{ needs.apply-infrastructure.outputs.droplet_id}}
          doctl compute ssh ${{ needs.apply-infrastructure.outputs.droplet_id}} --ssh-command ls 